
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {url='https://dist.creeper.host/Sponge/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = "commoble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}-${mc_version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets
{
	main
	api
	examplemod
	test
}

configurations {
	apiCompile.extendsFrom(compile)
}



minecraft {
    mappings channel: 'snapshot', version: "${mappings_version}"    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=cram.mixins.json"
            property 'forge.logging.console.level', 'debug'

            mods {
                modid {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=cram.mixins.json"
            property 'forge.logging.console.level', 'debug'

            mods {
                modid {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=cram.mixins.json"

            args '--mod', 'modid', '--all', '--output', file('src/generated/resources/')

            mods {
                modid {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
	implementation sourceSets.api.output
}
test {
	useJUnitPlatform()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	from sourceSets.main.output.classesDirs
	from sourceSets.api.output.classesDirs
	from sourceSets.main.output.resourcesDir
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//	classifier = "javadoc"
//	from javadoc.destinationDir
//}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}
task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.api.output
	from sourceSets.api.allJava
}
task debugJar(type: Jar) {
	classifier = "debug"
	from sourceSets.main.output
	from sourceSets.api.output
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

artifacts {
	//archives javadocJar
	archives sourcesJar
	archives apiJar
	archives debugJar
}

jar.finalizedBy('reobfJar') 

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
            artifact jar
			artifact apiJar
			artifact sourcesJar
			//artifact javadocJar
			artifact debugJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}
